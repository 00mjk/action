import assert from 'assert';
import { getInput, setOutput, setFailed } from '@actions/core';
import { context } from '@actions/github';
import { comparisonReportTemplate, headOnlyReportTemplate } from './report-templates/index.js';
import { sub } from './lib/markdown.js';
import comparePackages from './lib/compare-packages.js';
import upsertComment from './lib/upsert-comment.js';
import isBaseDiffFromHead from './lib/is-base-diff-from-head.js';
import buildRef from './lib/build-ref.js';
import * as log from './lib/log.js';
// import {createTempDirectory} from '@actions/cache/lib/internal/cacheUtils';

const COMMENT_SIGNATURE = sub('ðŸ¤– This report was automatically generated by [pkg-size-action](https://github.com/privatenumber/pkg-size-action/)');

(async () => {
	const { GITHUB_TOKEN } = process.env;
	assert(GITHUB_TOKEN, 'Environment variable "GITHUB_TOKEN" not set. Required for accessing and reporting on the PR.');

	const { pull_request: pr } = context.payload;
	const buildCommand = getInput('build-command');
	const commentReport = getInput('comment-report');
	const mode = getInput('mode') || 'comparison';
	const unchangedFiles = getInput('unchanged-files') || 'collapse';
	const hideFiles = getInput('hide-files');
	const sortBy = getInput('sort-by') || 'delta';
	const sortOrder = getInput('sort-order') || 'desc';
	const displaySize = getInput('display-size') || 'uncompressed';

	log.startGroup('Build HEAD');
	const headPkgData = await buildRef({
		buildCommand,
	});
	headPkgData.ref = pr.head;
	setOutput('headPkgData', headPkgData);
	log.endGroup();

	if (mode === 'head-only') {
		console.log('head-only');
		console.log(headOnlyReportTemplate({
			headPkgData,
		}));
		return;
	}

	const { ref: baseRef } = pr.base;
	let basePkgData;
	if (await isBaseDiffFromHead(baseRef)) {
		log.info('HEAD is different from BASE. Triggering build.');
		log.startGroup('Build BASE');
		basePkgData = await buildRef({
			ref: baseRef,
			buildCommand,
		});
		basePkgData.ref = pr.base;
		log.endGroup();
	} else {
		log.info('HEAD is identical to BASE. Skipping base build.');
		basePkgData = {
			...headPkgData,
			ref: pr.base,
		};
	}
	setOutput('basePkgData', basePkgData);

	const pkgComparisonData = comparePackages(headPkgData, basePkgData, {
		sortBy,
		sortOrder,
		hideFiles,
	});
	setOutput('pkgComparisonData', pkgComparisonData);

	if (commentReport !== 'false') {
		await upsertComment({
			token: GITHUB_TOKEN,
			commentSignature: COMMENT_SIGNATURE,
			repo: context.repo,
			prNumber: pr.number,
			body: comparisonReportTemplate({
				pkgComparisonData,
				unchangedFiles,
				displaySize,
			}),
		});
	}
})().catch((error) => {
	setFailed(error.message);
	log.warning(error.stack);
});
